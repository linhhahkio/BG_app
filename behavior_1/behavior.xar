<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Check mail" id="1" localization="8" tooltip="" x="422" y="90"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import imaplib
import email

class MyClass(GeneratedClass):
    mail_database = []
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.isRunning = False

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        try :
          self.mail.logout()
        except :
          pass

    def onInput_data(self, p):
        self.mail_database =  p
        self.onInput_onStart()

    def onInput_onStart(self):

        # Store number of new mail for each member
        mail_new = []

        #test database
        #self.logger.info(self.mail_database)

        for humans in self.mail_database:
            #Get gmail imap
            mail = imaplib.IMAP4_SSL('imap.gmail.com')
            mail.login(humans[1], humans[2])
            mail.list()
            mail.select('INBOX')

            #Get number of mail/unseen email
            status = mail.status('INBOX','(MESSAGES UNSEEN)')
            #self.logger.info(str(status))
            unseen_mail = str(status).rsplit("UNSEEN ")[1]
            unseen_mail = unseen_mail.split(")")[0]

            # Check if there is any unseen email
            mail_num = [humans[0],str(unseen_mail)]
            mail_new.append(mail_num)

            # log out
            mail.logout()

        # test mail_new
        #self.logger.info(mail_new)
        self.onShow(mail_new)

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="data" type="3" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Output name="onShow" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" /></Box><Box name="show" id="15" localization="8" tooltip="" x="633" y="324"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)


    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass


    def onInput_onStart(self, mail):
        # hide if already existing
        # self.hide()
        # show the new mail
        self.show(mail)
        # move


    def onInput_onStop(self):
        self.onUnload()
        self.hide()
        self.onStopped()


    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService


    def _getMemoryService(self):
        service = None
        try:
            service = self.session().service("ALMemory")
        except Exception as e:
            self.logger.error(e)
        return service



    def show(self, p):
        self._getMemoryService().insertData('mail_list_all', p)
        tabService = self._getTabletService()
        ip = tabService.robotIp()
        uid = self.packageUid()
        url = 'http://' + ip + '/apps/' + uid + '/index.html'
        tabService.loadUrl(url)
        tabService.showWebview()


    def hide(self):
        tabService = self._getTabletService()
        tabService.hideWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="846" y="196"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="60" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /><Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" /></Box><Box name="Get Users Info" id="12" localization="8" tooltip="" x="174" y="178"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[#!/usr/bin/python

import sqlite3
from sqlite3 import Error

class MyClass(GeneratedClass):
    data = []
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def create_connection(self, db_file):
        """ create a database connection to the SQLite database
            specified by the db_file
        :param db_file: database file
        :return: Connection object or None
        """
        try:
            conn = sqlite3.connect(db_file)
            return conn
        except Error as e:
            self.logger.info(e)
        return None

    def select_all_user(self, conn):
        """
        Query tasks by priority
        :param conn: the Connection object
        :return:
        """
        cur = conn.cursor()
        cur.execute("SELECT name,email_id,email_pass FROM humans")

        rows = cur.fetchall()

        for row in rows:
            tempUser = []
            tempUser.extend((str(row[0]),str(row[1]),str(row[2])))
            self.data.append(tempUser)

    def onInput_onStart(self):

        try:
            database = "/home/nao/.local/share/PackageManager/apps/bg_app-4b10c1" + "/html/db/email_data.db"
            #self.logger.info(database)
        except:
            self.logger.info("error connecting to db")


        # create a database connection
        conn = self.create_connection(database)
        with conn:
            self.select_all_user(conn)
        self.logger.info(self.data)
        self.onStopped(self.data)


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="15" indexofinput="2" outputowner="1" indexofoutput="6" /><Link inputowner="6" indexofinput="2" outputowner="15" indexofoutput="4" /><Link inputowner="12" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="4" outputowner="12" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="6" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>